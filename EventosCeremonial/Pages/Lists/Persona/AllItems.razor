@page "/persona"
@attribute [Authorize]

@using System.Net.Http
@using System.Net.Http.Json
@using Data
@using Data.Response

@inject HttpClient Http
@inject IJSRuntime js

<AuthorizeView Roles="Administrador, Soporte">

    <br />
    <br />
    <center class="panel-pane pane-titulo"><div class="pane-content"><h2 class="activities-sidbar">Personas</h2></div></center>
    <br />
    <br />
    <div class="row">
        <div class="col-2 text-left">
            <a type="button" class="btn btn-primary" href="persona/form">Nueva</a>
        </div>
    </div>
    @if (oRespuestaTemporal.Data != null)
    {
        if (oRespuestaTemporal.Data.Count() > 10)
        {
            <div class="row col-md-6 float-end">
                <div class="input-group col col-md-6">
                    <input class="form-control border-end-0 border rounded-pill" type="text" id="inputBusqueda" @bind-value="textoBusqueda">
                    <span class="input-group-append">
                        <button class="btn btn-outline-secondary bg-white border-start-0 border rounded-pill ms-n3" id="botonBusqueda" type="button" @onclick="() =>MostrarResultado(oRespuestaTemporal.Data)">
                            <i class="fa fa-search"></i>
                        </button>
                    </span>
                </div>
            </div>

        }

    }
    <table class="table tabla-condensed table-striped dataTable no-footer tablasLargas" id="ponchoTable" aria-describedby="ponchoTable_info" role="grid">
        <thead hidden="@EsconderBusquedas">
            <tr role="row">
                <th colspan="6" style="text-align: center;">Resultados encontrados</th>
            </tr>
            <tr role="row">
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>
                <th>Tipo documento</th>
                <th>Numero</th>
                <th></th>
            </tr>
        </thead>
        <tbody hidden="@EsconderBusquedas">
            @foreach (var oPersona in listaBusqueda)
            {
                <tr role="row" class="table-danger">
                    <td class="sorting_1" data-title="Id">
                        <p>@oPersona.Nombre</p>
                    </td>
                    <td class="sorting_1" data-title="Id">
                        <p>@oPersona.Apellido</p>
                    </td>
                    <td class="sorting_1" data-title="Id">
                        <p>@oPersona.MailContacto</p>
                    </td>

                    <td class="" data-title="">
                        <p>@oPersona.TipoDocumento</p>
                    </td>
                    <td class="" data-title="">
                        <p>@oPersona.NumeroDocumento</p>
                    </td>
                    <td>
                        <a href="/persona/form/@oPersona.Id"><i class="fa fa-edit"></i></a>
                    </td>
                </tr>
            }
        </tbody>



        <thead>
            <tr role="row">
                <th>Nombre</th>
                <th>Apellido</th>
                <th>Email</th>

                <th>Tipo documento</th>
                <th>Numero</th>
                <th></th>

            </tr>
        </thead>
        <tbody>
            @if (listaPersona == null)
            {
                <tr role="row" class="odd">
                    <td class="sorting_1" colspan="5">
                        <p>@textoNoHayRegistros</p>
                    </td>
                </tr>
            }
            @if (listaPersona != null)
            {
                @foreach (var oElement in listaPersona)
                {
                    <tr role="row" class="odd">

                        <td class="" data-title="Nombre">
                            <p>@oElement.Nombre</p>
                        </td>
                        <td class="" data-title="Nombre">
                            <p>@oElement.Apellido</p>
                        </td>
                        <td class="" data-title="Nombre">
                            <p>@oElement.MailContacto</p>
                        </td>
                        <td class="" data-title="">
                            <p>@oElement.TipoDocumento</p>
                        </td>
                        <td class="" data-title="">
                            <p>@oElement.NumeroDocumento</p>
                        </td>
                        <td>
                            <a href="/persona/form/@oElement.Id"><i class="fa fa-edit"></i></a>
                        </td>

                    </tr>
                }
            }
        </tbody>
    </table>
    <nav aria-label="Page navigation example">
        <ul class="pagination">
            @for (int i = 1; i <= cantPaginas; i++)
            {
                var fila = i;
                <li class="page-item"><button class="page-link" @onclick="() =>TraerPagina(fila)">@i</button></li>
            }
        </ul>
    </nav>
</AuthorizeView>

@code {
    public string Url = "/api/persona";
    public Respuesta<List<Persona>> oRespuesta = new Respuesta<List<Persona>>();

    public Respuesta<List<Persona>> oRespuestaTemporal = new Respuesta<List<Persona>>();

    public List<Persona> listaPersona = new List<Persona>();
    public int cantPaginas { get; set; }

    public int porcion { get; set; } = 20;
    public string textoNoHayRegistros { get; set; } = "Cargando...";

    public string textoBusqueda { get; set; } = "";
    private bool EsconderBusquedas { get; set; } = true;
    List<Persona> listaBusqueda = new List<Persona>();
    LoggerManger logger = new LoggerManger();

    //ESTA FUNCION LO QUE HACE ES BUSCAR DENTRO DE LA LISTA PERSONAS EL TEXTO ESCRITO EN EL CAMPO, BUSCA POR APELLIDO, NOMBRE, CORREO O DNI
    //SI YA LO AGREGO A LA LISTA DE ENCONTRADOS NO LO VUELVE A AGREGAR
    public async Task MostrarResultado(List<Persona> listaBusquedas)
    {


        try
        {
            if (textoBusqueda != null)
            {

                if (textoBusqueda != "" && textoBusqueda.Length > 3)
                {

                    List<Persona> rta1 = listaBusquedas.Where(x => x.Nombre.ToLower().Contains(textoBusqueda.ToLower())).ToList();
                    //TAMBBIEN SE BUSCA POR NOMBRE Y APELLIDO
                    List<Persona> rta2 = listaBusquedas.Where(x => x.Apellido.ToLower().Contains(textoBusqueda.ToLower())).ToList();

                    foreach (Persona item in rta2)
                    {
                        if (!rta1.Contains(item))
                        {
                            rta1.Add(item);
                        }
                    }
                    //SE BUSCA POR CORREO ELECTRONICO
                    List<Persona> rta3 = listaBusquedas.Where(x => x.MailContacto.ToLower().Contains(textoBusqueda.ToLower())).ToList();
                    foreach (Persona item in rta3)
                    {
                        if (!rta1.Contains(item))
                        {
                            rta1.Add(item);

                        }
                    }

                    //BUSCA POR NUMERO DE DOCUMENTO O PASAPORTE TIENE QUE SER TEXTUAL Y ADEMAS NO PEUDE ESTAR EN MINSUCULAS
                    List<Persona> rta4 = listaBusquedas.Where(x => x.NumeroDocumento == textoBusqueda).ToList();
                    foreach (Persona item in rta4)
                    {
                        if (!rta1.Contains(item))
                        {
                            rta1.Add(item);

                        }
                    }


                    listaBusqueda = rta1;

                }
            }



        }
        catch (Exception e)
        {

            logger.LogError("Error en busqueda de persona", e);

        }
        //buscar por nombre

        if (listaBusqueda.Count() > 0)
        {

            EsconderBusquedas = false;
        }
        else
        {
            EsconderBusquedas = true;


        }
    }
    protected override async Task OnInitializedAsync()
    {

        oRespuestaTemporal = await Http.GetFromJsonAsync<Respuesta<List<Persona>>>(Url);
        //SE FIJA CUAL ES LA CANTIDAD DE ELEMENTOS DE LA LISTA PARA PODER HACER LA PAGINACION


        if (oRespuestaTemporal.Data != null)
        {

            if (oRespuestaTemporal.Data.Count() > 0)
            {
                int totalFilas = oRespuestaTemporal.Data.Count();

                cantPaginas = totalFilas / porcion;

                if (totalFilas % porcion != 0)
                {
                    if (totalFilas < porcion)
                    {
                        listaPersona = oRespuestaTemporal.Data.GetRange(0, totalFilas);

                    }
                    else
                    {


                        cantPaginas++;
                        listaPersona = oRespuestaTemporal.Data.GetRange(0, porcion);

                    }

                }
                else
                {

                    listaPersona = oRespuestaTemporal.Data.GetRange(0, porcion);


                }
            }
            else
            {
                   listaPersona = null;
            textoNoHayRegistros = "No se encontraron registros";
            }
        }
        else
        {


            listaPersona = null;
            textoNoHayRegistros = "No se encontraron registros";
        }


    }

    protected async override void OnAfterRender(bool firstRender)
    {
        if (oRespuestaTemporal.Data != null)
        {
            if (oRespuestaTemporal.Data.Count() > 10)
            {

                if (firstRender == false)
                {

                    await js.InvokeVoidAsync("agregarEnter");

                }
            }
        }

        firstRender = true;
    }
    //RENUEVA LA CANTIDAD DE ELEMENTOS QUE APARECEN EN CADA PAGINA
    public async Task TraerPagina(int nro)
    {

        if (nro == 1)
        {
            listaPersona = oRespuestaTemporal.Data.GetRange(0, porcion);


        }
        else
        {
            int indice = (nro * porcion) - porcion;
            if (nro == cantPaginas)
            {
                if (oRespuestaTemporal.Data != null)
                {
                    int porcionF = oRespuestaTemporal.Data.Count() - indice;

                    listaPersona = oRespuestaTemporal.Data.GetRange(indice, porcionF);

                }

            }
            else
            {

                listaPersona = oRespuestaTemporal.Data.GetRange(indice, porcion);

            }


        }
    }
}
