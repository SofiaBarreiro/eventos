@page "/organismo/delete/{Id:int}"
@attribute [Authorize]

@using Data
@using Data.Response
@using System.Net.Http
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager


<AuthorizeView Roles="Administrador, Soporte">

<h3>Eliminar organismo</h3>

<p>¿Deseas eliminar el organismo: <b>@Nombre</b>?</p>

<div class="row">
    <div class="col-sm-12">
        <button href="" class="btn btn-secondary" @onclick="Cancelar">No</button>
        <button href="" class="btn btn-warning" @onclick="Eliminar">Sí</button>
    </div>
</div>

@if (_isVisible)
{
    <div id="error" class="row">
        <div class="col-md-12">
            <div class="alert alert-danger">
                <p>Error: @Error</p>
                <p>Contacte a su Administrador, Soporte.</p>
            </div>
        </div>
    </div>
}
</AuthorizeView >


@code {
    [Parameter]
    public int Id { get; set; }
    public string Nombre { get; set; }
    public string Error { get; set; }
    private bool _isVisible = false;
    Organismo oOrganismo = new Organismo();
    Respuesta<Object> oRespuesta = new Respuesta<Object>();
    Respuesta<Organismo> oRespuestaOrganismo = new Respuesta<Organismo>();
    public string Url = "/api/organismo";

    //ESTA EN DESUSO NO SE PUEDE ELIMINAR ORGANISMOS YA QUE ESTAN ENLAZADOS CON LAS PERSONAS
    protected override async Task OnInitializedAsync()
    {
        if (Id != 0)
        {
            oRespuestaOrganismo = await Http.GetFromJsonAsync<Respuesta<Organismo>>(Url + "/" + Id);
            oOrganismo = oRespuestaOrganismo.Data;

            Nombre = oOrganismo.Nombre;
        }
    }

    private void Cancelar() => NavigationManager.NavigateTo("/organismo", true);

    private async Task Eliminar()
    {
        var response = await Http.DeleteAsync(Url + "/" + Id);
        oRespuesta = response.Content.ReadFromJsonAsync<Respuesta<Object>>().Result;

        if (oRespuesta.Exito != 0)
        {
            NavigationManager.NavigateTo("/organismo", true);
        }
        else
        {
            _isVisible = !_isVisible;
        }
    }
}
