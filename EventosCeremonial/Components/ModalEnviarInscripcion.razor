@inject HttpClient Http
@inject IJSRuntime js
@inject NavigationManager NavigationManager
@using System.Threading;
@using EventosCeremonial.Helpers;
@using MimeKit;
<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ingrese el correo</h5>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-12 form-group item-form">
                        <label for="exampleInputEmail1">Correo electrónico*</label>
                        <input type="text" class="form-control" @bind-value="Email" id="inputEmail">
                    </div>
                </div>

            </div>
            <div class="modal-footer">
                <button type="button" id="botonGuardarRegistro" @onclick="Save" class="btn btn-primary">Enviar correo</button>
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Cancelar</button>
            </div>
        </div>
    </div>
</div>


@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}
@code {

    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    public string Email { get; set; } = "";
    private bool HayFlyer = true;

    public int IdEvento { get; set; } = 0;

    LoggerManger logger = new LoggerManger();
    //public string UrlConfirma = "/api/eventoparticipante/ConfirmaAsistencia";
    //public string UrlPersona = "/api/persona";
    public string Url = "/api/evento";
    public string UrlArchivo = "/api/archivos";

    //public string UrlInvitacion = "/api/invitacion";
    //public string UrlEventoParticipante = "/api/eventoparticipante";
    //public string UrlOrganismo = "/api/organismo";
    //Respuesta<Persona> oRespuestaPersona = new Respuesta<Persona>();
    Respuesta<Evento> oRespuestaEvento = new Respuesta<Evento>();
    //Respuesta<List<Invitacion>> oRespuestaInvitaciones = new Respuesta<List<Invitacion>>();
    //Respuesta<EventoParticipante> oRespuestaEventoParticipante = new Respuesta<EventoParticipante>();
    //Respuesta<EventoParticipante> oRespuestaEventoParticipanteCargado = new Respuesta<EventoParticipante>();
    Evento oEvento = new Evento();
    //List<Invitacion> invitaciones = new List<Invitacion>();
    //List<Persona> personasYaInvitadas = new List<Persona>();
    //List<Persona> personas = new List<Persona>();
    //public List<Organismo> Organismos { get; set; } = new List<Organismo>();
    //public Respuesta<List<Organismo>> oRespuestaOrganismo = new Respuesta<List<Organismo>>();
    //List<EventoParticipante> eventoParticipantes = new List<EventoParticipante>();
    //Respuesta<Object> oRespuestaInvitado = new Respuesta<Object>();
    //Persona personaAcargar = new Persona();
    //public List<Persona> personasPreinscriptas { get; set; } = new List<Persona>();
    //MailRequest listaPreinscriptos = new MailRequest();


    Respuesta<Archivo> oRespuestaArchivo = new Respuesta<Archivo>();


    public async Task Open(int idEvento)
    {
        try
        {
            ModalDisplay = "block";
            ModalClass = "Show";
            ShowBackdrop = true;
            IdEvento = idEvento;
            StateHasChanged();
            oRespuestaArchivo = await Http.GetFromJsonAsync<Respuesta<Archivo>>(UrlArchivo + "/" + idEvento);


            oRespuestaEvento = await Http.GetFromJsonAsync<Respuesta<Evento>>(Url + "/" + idEvento);
            if (oRespuestaEvento.Data != null)
            {
                oEvento = oRespuestaEvento.Data;

            }
            if (oEvento.IdEstado != 1)
            {

                await js.InvokeVoidAsync("alert", "El evento no se encuentra activo");
                var timer = new Timer(new TimerCallback(_ =>
                {
                    NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                }), null, 1000, 1000);
            }
            ChequearSiHayFlyer();
            if (HayFlyer == false)
            {

                await js.InvokeVoidAsync("alert", "El evento no tiene flyer");
                var timer = new Timer(new TimerCallback(_ =>
                {
                    NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
                }), null, 1000, 1000);
            }

        }
        catch (Exception e)
        {

            logger.LogError("Error en abrir formulario", e);

        }
    }

    private async Task ChequearSiHayFlyer()
    {
        var root = FuncionesBasicas.getAppSettings();

        if (oRespuestaArchivo.Data != null)
        {

            string localwwwroot = root.GetSection("DVArchivos")["EventosCeremonial"] + "/Temporales/Otros/" + oRespuestaArchivo.Data.NombreFlyer;

            if (!File.Exists(localwwwroot))
            {
                HayFlyer = false;

            }

        }
    }


    private async Task Close()
    {

        Email = "";
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        FuncionesBasicas.reloadPage(NavigationManager);

    }


    private async Task Save()
    {
        try
        {
            if (Email != null && oEvento != null)
            {
                if (Email != "")
                {

                    Email = Email.ToLower();

                    string url = NavigationManager.BaseUri + "/pre/" + oEvento.Id.ToString();

                    string domicilio = "";
                    var mailMessage = FuncionesEmail.CrearCuerpoMensajeInstitucion(Email, oEvento, url, NavigationManager.BaseUri, domicilio, oRespuestaArchivo.Data.NombreFlyer);
                    mailMessage.To.Add(new MailboxAddress("", Email));

                    FuncionesEmail.Conectarse(mailMessage);


                    Close();
                }

            }


        }
        catch (Exception ex)
        {

            logger.LogError("Error enviar invitacion a Institucion", ex);
        }
    }



    }