@inject HttpClient Http
@inject NavigationManager uriHelper
@inject IJSRuntime js
@inject NavigationManager NavigationManager
@using System.Threading;



<div class="modal @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ingrese sus datos</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="form-group">
                    <label for="exampleInputEmail1">Mail a donde le enviamos la invitación</label>
                    <input type="email" class="form-control" @bind-value="Email" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Ingrese su correo" disabled>
                </div>

                <div class="row">
                    <div class="col-md-6 form-group item-form" hidden="@MostrarPreguntaExtranjero">
                        <input type="checkbox" id="esExtranjeroC" />
                        ¿Es extranjero?
                    </div>
                    <div class="col-md-6 form-group item-form" hidden="hidden">
                        <label for="">datosExtranjero</label>
                        <input type="text" class="form-control" @bind-value="inputCampoExtranjerC" id="inputEsExtranjeroC">
                    </div>

                    <div class="form-group" hidden="hidden">
                        <label for="exampleInputPassword1">IdInvitado</label>
                        <input type="text" class="form-control" @bind-value="IdInvitado" placeholder="IdInvitado">
                    </div>
                </div>
                <div class="form-group">
                    <label id="NombreCampoC">@NombreCampoC *</label>
                    <input type="text" class="form-control" @bind-value="DNI" id="inputDNIConf">
                    <small class="form-text text-muted" id="smallMensajeC">@AclaracionDNI</small>
                </div>
                <div class="modal-footer">
                    <button type="button" @onclick="Save" class="btn btn-primary">Enviar confirmación</button>


                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Close()">Cancelar</button>

                </div>
            </div>
        </div>
    </div>

</div>

@if (ShowBackdrop)
{
    <div class="modal-backdrop fade show"></div>
}


@code {


    public Guid Guid = Guid.NewGuid();
    public string ModalDisplay = "none;";
    public string ModalClass = "";
    public bool ShowBackdrop = false;
    public int IdInvitado { get; set; } = 0;
    public string Email { get; set; } = "";
    public string DNI { get; set; } = "";
    public string habilitarDNI { get; set; } = "";
    public string NombreCampoC { get; set; } = "";
    public string AclaracionDNI { get; set; } = "";
    public string DNIConfirmacion { get; set; } = "";
    public string inputCampoExtranjerC { get; set; } = "";
    public bool MostrarPreguntaExtranjero { get; set; } = false;
    public string mensajeValidacion { get; set; } = "";





    LoggerManger logger = new LoggerManger();

    public string UrlConfirma = "/api/eventoparticipante/ConfirmaAsistencia";
    public string UrlPersona = "/api/persona";
    Respuesta<Persona> oRespuestaPersona = new Respuesta<Persona>();

    public async Task Open(int idInvitado, string email, string dniAux)
    {
        try
        {
            if (email != "")
            {
                NombreCampoC = "DNI";
                ModalDisplay = "block";
                ModalClass = "Show";
                ShowBackdrop = true;
                IdInvitado = idInvitado;
                string text = await js.InvokeAsync<string>("traerDatoInputC");
                inputCampoExtranjerC = text;

                oRespuestaPersona = await Http.GetFromJsonAsync<Respuesta<Persona>>(UrlPersona + "/TraerId/" + email);

                if (oRespuestaPersona.Data != null)
                {
                    if (email.Contains("@trabajo.gob.ar"))
                    {
                        NombreCampoC = "Nro de CUIL";
                        AclaracionDNI = "Si usted es empleado del MTEySS ingrese su CUIL sin guiones.";
                        MostrarPreguntaExtranjero = true;//aca oculta el div de es extranjero
                        inputCampoExtranjerC = "0";
                    }
                    else
                    {

                        AclaracionDNI = "Sólo DNI o Pasaporte sin puntos ni guiones.";

                    }
                    Email = email;
                }
                else
                {
                    throw new Exception("Se borro usuario de la lista Persona");

                }

            }
            else
            {

                throw new Exception("No se encontro correo");
            }
            StateHasChanged();

        }
        catch (Exception e)
        {

            logger.LogError("Error en abrir formulario", e);

        }
        await js.InvokeVoidAsync("checkEsExtranjeroC");

    }

    public void Close()
    {
        ModalDisplay = "none";
        ModalClass = "";
        ShowBackdrop = false;
        StateHasChanged();
        FuncionesBasicas.reloadPage(uriHelper);

    }
    private async Task Save()
    {
        try
        {
            string text = await js.InvokeAsync<string>("traerDatoInputC");
            inputCampoExtranjerC = text;
            if (IdInvitado != 0 || Email != "")
            {

                if (DNI != null)
                {
                    if (DNI != "")
                    {
                        if (!validarCampos())
                        {
                            await js.InvokeVoidAsync("alert", mensajeValidacion);

                            return;
                        }

                        if (oRespuestaPersona.Data != null)
                        {
                            Persona aux = oRespuestaPersona.Data;
                            aux.NumeroDocumento = DNI;

                            if (inputCampoExtranjerC == "")
                            {
                                inputCampoExtranjerC = "0";

                            }

                            if (inputCampoExtranjerC == "1")
                            {
                                aux.TipoDocumento = "PASAPORTE";
                            }
                            else
                            {

                                if (aux.MailContacto.Contains("@trabajo.gob.ar") && aux.NumeroDocumento.Length == 11)
                                {
                                    aux.TipoDocumento = "CUIL";
                                }
                                else
                                {
                                    if (aux.NumeroDocumento.Length == 8)
                                    {
                                        aux.TipoDocumento = "DNI";
                                    }
                                    else
                                    {

                                        await js.InvokeVoidAsync("alert", "Los datos ingresados son incorretos");
                                        return;
                                    }
                                    inputCampoExtranjerC = "0";


                                }


                            }

                            var nada = await Http.PutAsJsonAsync<Persona>(UrlPersona + "/EditarDNI", aux);

                            var dato = await Http.PutAsJsonAsync<int>(UrlConfirma + "/" + IdInvitado, IdInvitado);

                            if (dato.IsSuccessStatusCode == false)
                            {
                                await js.InvokeVoidAsync("alert", "Los datos ingresados son incorretos");
                                FuncionesBasicas.reloadPage(uriHelper);

                            }
                            else
                            {
                                await js.InvokeVoidAsync("alert", "Su preinscripción ha sido enviada. En breve le enviaremos la disponibilidad de vacante a su correo.");
                                    var timer = new Timer(new TimerCallback(_ =>{
                        uriHelper.NavigateTo(NavigationManager.Uri, forceLoad: true);
                     }), null, 1000, 1000);
                            }
                        }

                    }
                    else
                    {
                        await js.InvokeVoidAsync("alert", "Para completar su inscripción debe agregar Un número de identificación (CUIL/DNI/Pasaporte) según corresponda");
                        return;
                    }
                }
                else
                {
                    await js.InvokeVoidAsync("alert", "Para completar su inscripción debe agregar Un número de identificación (CUIL/DNI/Pasaporte) según corresponda");
                    return;
                }
            }
            else
            {
                await js.InvokeVoidAsync("alert", "Hubo un Error en la carga de datos");
                FuncionesBasicas.reloadPage(uriHelper);
            }

        }
        catch (Exception ex)
        {
            logger.LogError("Error pre save", ex);

        }
    }


     private bool validarCampos()
    {
        bool retorno = true;

        try
        {

            Email = Email.ToLower();
            if (!FuncionesBasicas.IsValidMail(Email))
            {
                mensajeValidacion = "El formato del email es incorrecto";
                retorno = false;
            }
            else
            {
                
                if (DNI.Length > 15)
                {
                    mensajeValidacion = "El número de documento/pasaporte no puede tener mas de 15 dígitos.";
                    retorno = false;
                }
                
                if (Email.Contains("@trabajo.gob.ar") && DNI.Length != 11)
                {
                    mensajeValidacion = "Si es empleado del ministerio de trabajo debe ingresar su CUIL para poder continuar.";
                    retorno = false;
                }

            }
        }
        catch (Exception e)
        {

            logger.LogError("Error en validarCampos confirmar", e);

        }

        return retorno;
    }

    }
